*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.q.t
Package Version Name: 1.0
Package Version Code: 1
Min Sdk: 14
Target Sdk: 15
MD5   : fbfa665f66829ede0766ac2bcca99129
SHA1  : 68f6147db6eb4c7ad463409f65686cf78cdf58b4
SHA256: dcdc3662f866aaa3f37a431e29701d8f588cd462c69230b1aabbaf04de73ef32
SHA512: 08b0103a994ee0730a0ebe590ba3ad1e4a629518e1c9c7cb29aee7d1274c8c05d3351eb3301c1cf3cd61fdb10edb8ff3d1044b4bbc4a966eb1f708c850336462
Analyze Signature: d4207cf50cd20655e957a0d4944c2ed7f2706f07bfae17a033d1f8c905a2adacf4a87e2c5efc7ba976e25ba8b439524135161098078e4a4d2fef681b78b115f1
------------------------------------------------------------------------------------------------
[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
           Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.q.t.QService
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:2):
               http://www.cmeuivl.com/dcaa.do
                   => Lcom/a/a/a/b;-><clinit>()V
               http://www.cmeuivl.com/dnc.do
                   => Lcom/q/t/a/a;->b(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)Z
                   => Lcom/a/a/a/b;-><clinit>()V
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                  service => com.q.t.QService
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/a/a/a/a;->b(Landroid/content/Context;)Ljava/lang/String; (0x20) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/a/a/b/a/a;->g(Landroid/content/Context;)Ljava/util/List; (0xec) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/a/a/b/a/a;->g(Landroid/content/Context;)Ljava/util/List; (0xf4) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/a/a/b/a/a;->k(Landroid/content/Context;)Ljava/util/List; (0x7c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/a/a/b/a/a;->k(Landroid/content/Context;)Ljava/util/List; (0xb8) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/q/t/a/a/a;->g(Landroid/content/Context;)Ljava/util/List; (0xec) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/q/t/a/a/a;->g(Landroid/content/Context;)Ljava/util/List; (0xf4) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/q/t/a/a/a;->k(Landroid/content/Context;)Ljava/util/List; (0x7c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/q/t/a/a/a;->k(Landroid/content/Context;)Ljava/util/List; (0xb8) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/q/t/a/a/b;->a(Landroid/content/Context;)Ljava/lang/String; (0x1c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
           Security case related to ADB Backup:
           1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
           2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
           3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
           Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup
[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               Lcom/a/a/a/b;-><clinit>()V  => 'su'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/mount -o remount,rw
                    /system'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/lib/librsjni.so'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 777 /system/etc/apn'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/cat '
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/lib/libRSSupport.so'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/rm -r /data/data/'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/mkdir /system/etc/apn'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/app/FunStore.apk'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/lib/liblocSDK4d.so'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/rm -r '
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 6755
                    /system/etc/apn/dupdate'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/lib/libSDK_Core_1.1.2.so'
               Lcom/q/t/a/a;->a(Landroid/content/Context;)V  => '/system/bin/sh'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 6755
                    /system/etc/apn/update'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '#!/system/bin/sh'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 755 /system/etc
                    /install-recovery.sh'
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/rm '
               Lcom/q/t/a/a;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String;  => '/system/bin/chmod 644
                    /system/lib/libandashi.so'
               Lcom/a/a/a/b;-><clinit>()V  => '/system/bin/'
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/q/t/a/a;->b(Landroid/content/Context;)V (0x22) ---> Ljava/io/File;->delete()Z
               => Lcom/q/t/a/a;->b(Landroid/content/Context;)V (0x2e) ---> Ljava/io/File;->delete()Z
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is "NOT" using Android SQLite databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info]  External Storage Accessing:
           External storage access not found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 0.09403 secs
Total elapsed time: 0.246294 secs
