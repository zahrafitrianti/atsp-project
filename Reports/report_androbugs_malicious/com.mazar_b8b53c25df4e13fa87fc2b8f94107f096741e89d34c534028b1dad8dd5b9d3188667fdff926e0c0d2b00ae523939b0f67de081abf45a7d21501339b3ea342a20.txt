*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.mazar
Package Version Name: 1.0
Package Version Code: 1
Min Sdk: 9
Target Sdk: 22
MD5   : 18e87c855d4586401c3865e562c0426e
SHA1  : 9df852e290001aa4f2eaa3d60adfc5c1fa0beb2c
SHA256: 97846306c8e796ba5eb8ddaf47ef4b38eedf900d955923907cb95fde832a1204
SHA512: 99a6299a6b46c52de2938c5fca55514a133acbc7fa54347a8b5115a361e4b5a20504786cfbef2618165b18d094daaedc1932417ec60bd8c5f1e13592a4064d59
Analyze Signature: b8b53c25df4e13fa87fc2b8f94107f096741e89d34c534028b1dad8dd5b9d3188667fdff926e0c0d2b00ae523939b0f67de081abf45a7d21501339b3ea342a20
------------------------------------------------------------------------------------------------
[Critical] <Command> Runtime Command Checking:
           This app is using critical function 'Runtime.getRuntime().exec("...")'.
           Please confirm these following code secions are not harmful:
               => Lcom/mazar/tor/TorUtils;->doShellCommand([Ljava/lang/String; Z)I (0x14) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Lcom/mazar/tor/TorUtils;->findProcessIdWithPS(Ljava/lang/String;)I (0x3c) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->doShellCommand([Ljava/lang/String; Ljava/lang/StringBuilder; Z Z)I
                    (0x18) ---> Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->doShellCommand([Ljava/lang/String; Ljava/lang/StringBuilder; Z Z)I
                    (0xb2) ---> Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->findProcessIdWithPS(Ljava/lang/String;)I (0x10) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
[Critical] <Command> Runtime Critical Command Checking:
           Requesting for "root" permission code sections 'Runtime.getRuntime().exec("su")' found (Critical but maybe false positive):
               => Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->doShellCommand([Ljava/lang/String; Ljava/lang/StringBuilder; Z Z)I
                    (0x18) ---> Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
[Critical] <Debug> Android Debug Mode Checking:
           DEBUG mode is ON(android:debuggable="true") in AndroidManifest.xml. This is very dangerous. The attackers will be able to sniffer
           the debug messages by Logcat. Please disable the DEBUG mode if it is a released application.
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 receiver => com.mazar.Starter
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/mazar/utils/Utils;->getDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x10) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/mazar/utils/Utils;->getDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x4c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Warning]  Codes for Sending SMS:
           This app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage):
               => Lcom/mazar/utils/Utils;->runMsg(Ljava/lang/String; Ljava/lang/String; Landroid/content/Context;)V (0x50) --->
                    Landroid/telephony/SmsManager;->sendMultipartTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/util/ArrayList;
                    Ljava/util/ArrayList; Ljava/util/ArrayList;)V
               => Lcom/mazar/utils/Utils;->runMsg(Ljava/lang/String; Ljava/lang/String; Landroid/content/Context;)V (0xce) --->
                    Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
[Warning] <SSL_Security> SSL Certificate Verification Checking:
           Please make sure this app has the conditions to check the validation of SSL Certificate. If it's not properly checked, it MAY
           allows self-signed, expired or mismatch CN certificates for SSL connection.
           This is a critical vulnerability and allows attackers to do MITM attacks without your knowledge.
           If you are transmitting users' username or password, these sensitive information may be leaking.
           Reference:
           (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (2)Android Security book: http://goo.gl/BFb65r
           (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561
           This vulnerability is much more severe than Apple's "goto fail" vulnerability: http://goo.gl/eFlovw
           Please do not try to create a "X509Certificate" and override "checkClientTrusted", "checkServerTrusted", and "getAcceptedIssuers"
           functions with blank implementation.
           We strongly suggest you use the existing API instead of creating your own X509Certificate class.
           Please modify or remove these vulnerable code:
               --------------------------------------------------
               [Maybe Vulnerable (Please manually confirm)]
               => Lch/boye/httpclientandroidlib/conn/ssl/SSLContextBuilder$TrustManagerDelegate;
                     -> used by: Lch/boye/httpclientandroidlib/conn/ssl/SSLContextBuilder;->loadTrustMaterial(Ljava/security/KeyStore;
                    Lch/boye/httpclientandroidlib/conn/ssl/TrustStrategy;)Lch/boye/httpclientandroidlib/conn/ssl/SSLContextBuilder;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/mazar/HtmlDialog;->onCreate(Landroid/os/Bundle;)V
               Lcom/mazar/HtmlDialog;->onNewIntent(Landroid/content/Intent;)V
               Lcom/mazar/InjDialog;->onCreate(Landroid/os/Bundle;)V
               Lcom/mazar/InjDialog;->onNewIntent(Landroid/content/Intent;)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/mazar/HtmlDialog;->onCreate(Landroid/os/Bundle;)V (0xd0) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/mazar/HtmlDialog;->onNewIntent(Landroid/content/Intent;)V (0x108) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/mazar/InjDialog;->onCreate(Landroid/os/Bundle;)V (0xbc) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/mazar/InjDialog;->onNewIntent(Landroid/content/Intent;)V (0xfe) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->isRootPossible()Z  => '/system/bin/su'
               Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->isRootPossible()Z  => 'su'
               Linfo/guardianproject/netcipher/proxy/TorServiceUtils;->doShellCommand([Ljava/lang/String; Ljava/lang/StringBuilder; Z Z)I
                    => 'su'
               Lcom/mazar/tor/rootcommands/util/Utils;->getSuPath()Ljava/lang/String;  => 'su'
               Lcom/mazar/tor/rootcommands/Remounter;->remount(Ljava/lang/String; Ljava/lang/String;)Z  => '/system/bin/toolbox mount -o
                    remount,'
               Lcom/mazar/tor/rootcommands/util/Utils;-><clinit>()V  => '/system/bin/failsafe/'
               Lcom/mazar/tor/rootcommands/util/Utils;-><clinit>()V  => '/system/bin/'
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/mazar/tor/TorUnpacker;->deleteDirectory(Ljava/io/File;)V (0x28) ---> Ljava/io/File;->delete()Z
               => Lcom/mazar/tor/TorUnpacker;->deleteDirectory(Ljava/io/File;)V (0x54) ---> Ljava/io/File;->delete()Z
               => Lch/boye/httpclientandroidlib/impl/client/cache/FileResource;->dispose()V (0x18) ---> Ljava/io/File;->delete()Z
[Notice] <KeyStore><Hacker> KeyStore File Location:
           BKS Keystore file:
               res/raw/debiancacerts.bks
[Notice] <KeyStore><Hacker> KeyStore Protection Information:
           The Keystores below are "protected" by password and seem using SSL-pinning (Total: 1). You can use "Portecle" tool to manage the
           certificates in the KeyStore:
               => Linfo/guardianproject/netcipher/client/StrongHttpsClient;->loadKeyStore()Ljava/security/KeyStore; (0x30) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 receiver => com.mazar.MessageReceiver
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" you're not using it.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is "NOT" using Android SQLite databases.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info]  External Storage Accessing:
           External storage access not found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Connection Checking:
           Did not discover urls that are not under SSL (Notice: if you encrypt the url string, we can not discover that).
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 3.597248 secs
Total elapsed time: 11.331013 secs
