*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: adsprotech.games.ball.shooter.two
Package Version Name: 1.0
Package Version Code: 1
Min Sdk: 15
Target Sdk: 24
MD5   : ebec360c7350a131a362ef9915bc48df
SHA1  : cabae3fcbcd7c3b7aa2661142de8b7281319231c
SHA256: 629454356213cc9961a1ab8b09fd4f4e0be9d27bbf41842590231658bb7a0cb7
SHA512: c1ed8566a0e783347c1924f4cff2c2e12bfc17e9bb7622371d1ec85d64cd782fc42d85ceee1dfd65a717f634901948d66fefcfac473d0eaba0cd95d7a4eae1ba
Analyze Signature: 055035d0866093d0ad5f27a010ec292afa4f9cc340b8d29fb4420a8e6ca824662c4ff26492b7ddcbbc67ca24fea7b609cd7145681c234ae0fb591a370562001e
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:7):
               http://d1byvlfiet2h9q.cloudfront.net/InApp/resources/adInformationDialog3.html
                   => Lcom/startapp/android/publish/adinformation/AdInformationConfig;-><init>()V
               http://play.google.com
                   => Lcom/startapp/android/publish/h/v;->g(Ljava/lang/String;)Z
               http://plus.google.com/
                   => Lcom/google/android/gms/common/internal/zzo;-><clinit>()V
               http://www.amazon.com/gp/mas/get-appstore/android/ref=mas_mx_mba_iap_dl
                   => Lcom/amazon/device/iap/internal/b/b;->doAction()V
               http://www.dummy.com
                   => Lcom/startapp/android/publish/nativead/NativeAdDetails;->getImageUrl()Ljava/lang/String;
               http://www.google.com
                   => Lcom/google/android/gms/internal/zzhb;-><init>(Landroid/content/Context;)V
               http://www.startappexchange.com
                   => Lcom/startapp/android/publish/h/v;->a(Landroid/webkit/WebView; Ljava/lang/String;)V
[Critical] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           Found a critical WebView "addJavascriptInterface" vulnerability. This method can be used to allow JavaScript to control the host
           application.
           This is a powerful feature, but also presents a security risk for applications targeted to API level JELLY_BEAN(4.2) or below,
           because JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing
           untrusted content could allow an attacker to manipulate the host application in unintended ways, executing Java code with the
           permissions of the host application.
           Reference:
             1."http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
           java.lang.String) "
             2.https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
             3.http://50.56.33.56/blog/?p=314
             4.http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-vulnerability/
           Please modify the below code:
               => Lcom/startapp/android/publish/adinformation/a;->onClick(Landroid/view/View;)V (0xca) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/startapp/android/publish/banner/bannerstandard/BannerStandard;->initBanner()V (0x9e) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/startapp/android/publish/c/c;->r()V (0x158) ---> Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object;
                    Ljava/lang/String;)V
               => Lcom/startapp/android/publish/slider/b;->b()V (0x6e) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
[Warning]  Dynamic Code Loading:
           Dynamic code loading(DexClassLoader) found:
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0xaa) --->
                    Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/ClassLoader;)V
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0xc0) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0xd8) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0xf0) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x108) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x120) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x138) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x150) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x168) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x180) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/startapp/android/publish/h/p;->a(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/unity/purchasing/amazon/AmazonPurchasing;->writeSandboxJSON(Ljava/lang/String;)V (0x14) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/unity3d/player/UnityPlayer;->a(Landroid/content/Context;)[Ljava/lang/String; (0x42) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 receiver => com.amazon.device.iap.ResponseReceiver
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/google/android/gms/fitness/data/Device;->zzT(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/internal/zzhw;->zzz(Landroid/content/Context;)Ljava/lang/String; (0x30) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/tagmanager/zzbj;->zzal(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/tagmanager/zzz;->zzal(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/google/android/gms/internal/zzan$2;->run()V
               Lcom/google/android/gms/internal/zzez;->zzdr()Landroid/webkit/WebView;
               Lcom/google/android/gms/internal/zzho;->zza(Landroid/content/Context; Ljava/lang/String; Landroid/webkit/WebSettings;)V
               Lcom/google/android/gms/internal/zzho;->zzv(Landroid/content/Context;)Ljava/lang/String;
               Lcom/google/android/gms/internal/zzhp$zzb;->zza(Landroid/content/Context; Landroid/webkit/WebSettings;)Z
               Lcom/google/android/gms/internal/zzhp$zzd;->getDefaultUserAgent(Landroid/content/Context;)Ljava/lang/String;
               Lcom/google/android/gms/internal/zzhp$zzd;->zza(Landroid/content/Context; Landroid/webkit/WebSettings;)Z
               Lcom/google/android/gms/internal/zzif;-><init>(Lcom/google/android/gms/internal/zzif$zza;
                    Lcom/google/android/gms/internal/zzba; Z Z Lcom/google/android/gms/internal/zzk;
                    Lcom/google/android/gms/internal/zzhy;)V
               Lcom/startapp/android/publish/Ad;->load(Lcom/startapp/android/publish/model/AdPreferences;
                    Lcom/startapp/android/publish/AdEventListener; Z)Z
               Lcom/startapp/android/publish/adinformation/a;->onClick(Landroid/view/View;)V
               Lcom/startapp/android/publish/banner/bannerstandard/BannerStandard;->init()V
               Lcom/startapp/android/publish/c/c;->r()V
               Lcom/startapp/android/publish/h/b;->a(Landroid/webkit/WebView;)V
               Lcom/startapp/android/publish/h/v;->a(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; J
                    Ljava/lang/Runnable;)V
               Lcom/startapp/android/publish/slider/b;->b()V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/google/android/gms/internal/zzez;->zzdr()Landroid/webkit/WebView; (0x18) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/google/android/gms/internal/zzif;-><init>(Lcom/google/android/gms/internal/zzif$zza;
                    Lcom/google/android/gms/internal/zzba; Z Z Lcom/google/android/gms/internal/zzk;
                    Lcom/google/android/gms/internal/zzhy;)V (0x70) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/startapp/android/publish/adinformation/a;->onClick(Landroid/view/View;)V (0x78) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/startapp/android/publish/banner/bannerstandard/BannerStandard;->init()V (0xbe) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/startapp/android/publish/c/c;->r()V (0xf4) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/startapp/android/publish/h/v;->a(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; J
                    Ljava/lang/Runnable;)V (0x12c) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/startapp/android/publish/slider/b;->b()V (0x60) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
           Security case related to ADB Backup:
           1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
           2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
           3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
           Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/google/android/gms/analytics/zzag$zza;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x9e) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/zza;->zziw()Ljava/io/FileOutputStream; (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x308) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x328) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x33a) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/zzi;->zzg(Landroid/content/Context;)V (0x35a) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/zzvn;->zzg(Ljava/lang/String; [B)V (0x80) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/zzbx$zzb;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x9e) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/zzcm;->zzc(Lcom/google/android/gms/internal/zzvd$zza;)Z (0x54) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/zzv$zza;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x32) --->
                    Ljava/io/File;->delete()Z
               => Lcom/startapp/android/publish/b/e;->a(I)Z (0x7a) ---> Ljava/io/File;->delete()Z
               => Lcom/startapp/android/publish/video/e;->a(Landroid/content/Context; Ljava/net/URL; Ljava/lang/String;)Ljava/lang/String;
                    (0x136) ---> Ljava/io/File;->delete()Z
[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/google/android/gms/internal/zzra;->zzqU()Lcom/google/android/gms/internal/zzrf; (0x3a) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/startapp/android/publish/h/v;->g(Landroid/content/Context;)Ljava/lang/String; (0x10) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->isGooglePlayServicesAvailable(Landroid/content/Context;)I (0x40)
                    ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->isGooglePlayServicesAvailable(Landroid/content/Context;)I (0xba)
                    ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->zzb(Landroid/content/pm/PackageManager;)Z (0x1c) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/zzc;->zzb(Landroid/content/pm/PackageManager; Ljava/lang/String;)Z (0x4) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/samsung/android/sdk/iap/lib/helper/SamsungIapHelper;->isValidIapPackage(Landroid/content/Context;)Z (0x12) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
------------------------------------------------------------
AndroBugs analyzing time: 7.69998 secs
Total elapsed time: 31.228515 secs
