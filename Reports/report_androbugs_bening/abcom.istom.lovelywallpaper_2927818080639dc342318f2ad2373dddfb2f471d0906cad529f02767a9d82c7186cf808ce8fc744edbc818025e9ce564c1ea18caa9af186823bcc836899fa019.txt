*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: abcom.istom.lovelywallpaper
Package Version Name: 1.1
Package Version Code: 2
Min Sdk: 8
Target Sdk: 19
MD5   : fc0fbc9e4d09fe1fcd389e86947aadab
SHA1  : 564b02cf101b53eb69832ec98d53bbfe61fb45ea
SHA256: bab98dbe91dbfd29b96eaebdb73184baad02418c1de6a695c85e6164184c965f
SHA512: 75edbdd3667e2ab164e2125f157c64b60f771bb8419c7189848115e50d6728b66f5ee6236db24fb21659df7eafde3545afc649ed2ff3287af55a8f3876905aec
Analyze Signature: 2927818080639dc342318f2ad2373dddfb2f471d0906cad529f02767a9d82c7186cf808ce8fc744edbc818025e9ce564c1ea18caa9af186823bcc836899fa019
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:14):
               http://alog.umeng.co/app_logs
                   => Lcom/umeng/analytics/f;-><clinit>()V
               http://alog.umeng.com/app_logs
                   => Lcom/umeng/analytics/f;-><clinit>()V
               http://au.umeng.co/api/check_app_update
                   => Lcom/umeng/update/e;-><init>(Landroid/content/Context;)V
               http://au.umeng.com/api/check_app_update
                   => Lcom/umeng/update/e;-><init>(Landroid/content/Context;)V
               http://feedback.umeng.com/feedback/feedbacks
                   => Lcom/umeng/fb/a/b;->a(Lcom/umeng/fb/model/UserTitleReply;)Z
               http://feedback.umeng.com/feedback/reply
                   => Lcom/umeng/fb/a/b;->a(Lcom/umeng/fb/model/UserReply;)Z
                   => Lcom/umeng/fb/a/b;->a(Ljava/util/List; Ljava/lang/String; Ljava/lang/String;)Ljava/util/List;
               http://googleads.g.doubleclick.net
                   => Lcom/google/android/gms/internal/ci$1;->run()V
               http://media.admob.com/mraid/v1/mraid_app_banner.js
                   => Lcom/google/android/gms/internal/dg;->shouldInterceptRequest(Landroid/webkit/WebView;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse;
               http://media.admob.com/mraid/v1/mraid_app_expanded_banner.js
                   => Lcom/google/android/gms/internal/dg;->shouldInterceptRequest(Landroid/webkit/WebView;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse;
               http://media.admob.com/mraid/v1/mraid_app_interstitial.js
                   => Lcom/google/android/gms/internal/dg;->shouldInterceptRequest(Landroid/webkit/WebView;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse;
               http://oc.umeng.co/check_config_update
                   => Lcom/umeng/analytics/f;-><clinit>()V
               http://oc.umeng.com/check_config_update
                   => Lcom/umeng/analytics/f;-><clinit>()V
               http://plus.google.com/
                   => Lcom/google/android/gms/internal/ek;-><clinit>()V
               http://www.google.com
                   => Lcom/google/android/gms/internal/cm;-><init>(Landroid/content/Context;)V
[Warning]  Dynamic Code Loading:
           Dynamic code loading(DexClassLoader) found:
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0xa8) --->
                    Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/ClassLoader;)V
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0xbe) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0xd6) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0xee) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0x106) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0x11e) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0x136) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/umeng/common/net/DownloadingService$b;-><init>(Lcom/umeng/common/net/DownloadingService; Landroid/content/Context;
                    Lcom/umeng/common/net/a$a; I I Lcom/umeng/common/net/DownloadingService$a;)V (0x9e) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/umeng/common/net/p;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String; (0x4c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/umeng/common/net/p;->b(Landroid/content/Context; Ljava/lang/String;)Ljava/io/File; (0x14) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/umeng/common/b;->g(Landroid/content/Context;)Ljava/lang/String; (0x36) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/google/android/gms/internal/cz;->l(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/umeng/common/b;->g(Landroid/content/Context;)Ljava/lang/String; (0x86) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/tagmanager/bk;->G(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/tagmanager/z;->G(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/google/ads/mediation/jsadapter/JavascriptAdapter;->requestBannerAd(Lcom/google/ads/mediation/MediationBannerListener;
                    Landroid/app/Activity; Lcom/google/ads/mediation/jsadapter/JavascriptServerParameters; Lcom/google/ads/AdSize;
                    Lcom/google/ads/mediation/MediationAdRequest; Lcom/google/ads/mediation/EmptyNetworkExtras;)V
               Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Landroid/webkit/WebSettings;)V
               Lcom/google/android/gms/internal/cv;->j(Landroid/content/Context;)Ljava/lang/String;
               Lcom/google/android/gms/internal/cw;->a(Landroid/content/Context; Landroid/webkit/WebSettings;)V
               Lcom/google/android/gms/internal/cx;->a(Landroid/content/Context; Landroid/webkit/WebSettings;)V
               Lcom/google/android/gms/internal/cx;->getDefaultUserAgent(Landroid/content/Context;)Ljava/lang/String;
               Lcom/google/android/gms/internal/dd;-><init>(Lcom/google/android/gms/internal/dd$a; Lcom/google/android/gms/internal/ab; Z Z
                    Lcom/google/android/gms/internal/l; Lcom/google/android/gms/internal/db;)V
               Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;
                    Landroid/webkit/WebChromeClient;)V
               Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/google/android/gms/internal/dd;-><init>(Lcom/google/android/gms/internal/dd$a; Lcom/google/android/gms/internal/ab; Z
                    Z Lcom/google/android/gms/internal/l; Lcom/google/android/gms/internal/db;)V (0x3e) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;)V (0x14) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;
                    Landroid/webkit/WebChromeClient;)V (0x14) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/google/ads/mediation/jsadapter/JavascriptAdapter;->requestBannerAd(Lcom/google/ads/mediation/MediationBannerListener;
                    Landroid/app/Activity; Lcom/google/ads/mediation/jsadapter/JavascriptServerParameters; Lcom/google/ads/AdSize;
                    Lcom/google/ads/mediation/MediationAdRequest; Lcom/google/ads/mediation/EmptyNetworkExtras;)V (0x58) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
           Security case related to ADB Backup:
           1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
           2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
           3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
           Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
           Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
           But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use encrypt your
           databases and Journals by "SQLCipher" or other libs).
           Proof-Of-Concept Reference:
           (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
           (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/google/android/gms/analytics/ac$a;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x9e) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/cb$b;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x9e) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/v$a;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x32) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/analytics/i;->a(Landroid/content/Context; Ljava/lang/String;)Lorg/json/JSONObject; (0x28) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/DownloadingService$e;->a([Ljava/lang/String;)Ljava/lang/Integer; (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/p$c;->a([Ljava/lang/Object;)Landroid/graphics/drawable/Drawable; (0x48) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/p;->a(Landroid/content/Context; Landroid/widget/ImageView; Ljava/lang/String; Z
                    Lcom/umeng/common/net/p$a; Landroid/view/animation/Animation; Z)V (0x52) ---> Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/p;->c(Ljava/io/File;)V (0x8a) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0x244) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/internal/j;->e(Landroid/content/Context;)V (0x264) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/tagmanager/cq;->c(Lcom/google/android/gms/internal/jd$a;)Z (0x54) ---> Ljava/io/File;->delete()Z
[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Found codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml:
               => Lcom/umeng/common/b;->x (Landroid/content/Context;)Z
[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/google/android/gms/analytics/g;-><init>(Landroid/content/Context;)V (0x1e) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->isGooglePlayServicesAvailable(Landroid/content/Context;)I (0x62)
                    ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->isGooglePlayServicesAvailable(Landroid/content/Context;)I (0x72)
                    ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtil;->u(Landroid/content/Context;)Z (0x20) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
[Notice]  HttpURLConnection Android Bug Checking:
           You're using "HttpURLConnection". Prior to Android 2.2 (Froyo), "HttpURLConnection" had some frustrating bugs.
           In particular, calling close() on a readable InputStream could poison the connection pool. Work around this by disabling
           connection pooling.
           Please check the reference:
            (1)http://developer.android.com/reference/java/net/HttpURLConnection.html
            (2)http://android-developers.blogspot.tw/2011/09/androids-http-clients.html
               => Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Z Ljava/net/HttpURLConnection;)V
                    (0x6) ---> Ljava/net/HttpURLConnection;->setConnectTimeout(I)V
               => Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Z Ljava/net/HttpURLConnection;)V
                    (0xc) ---> Ljava/net/HttpURLConnection;->setInstanceFollowRedirects(Z)V
               => Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Z Ljava/net/HttpURLConnection;)V
                    (0x12) ---> Ljava/net/HttpURLConnection;->setReadTimeout(I)V
               => Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Z Ljava/net/HttpURLConnection;)V
                    (0x24) ---> Ljava/net/HttpURLConnection;->setRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/google/android/gms/internal/cv;->a(Landroid/content/Context; Ljava/lang/String; Z Ljava/net/HttpURLConnection;)V
                    (0x2c) ---> Ljava/net/HttpURLConnection;->setUseCaches(Z)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0xea) --->
                    Ljava/net/HttpURLConnection;->setRequestMethod(Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0xf8) --->
                    Ljava/net/HttpURLConnection;->setRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x106) --->
                    Ljava/net/HttpURLConnection;->addRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x110) ---> Ljava/net/HttpURLConnection;->setConnectTimeout(I)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x11a) ---> Ljava/net/HttpURLConnection;->setReadTimeout(I)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x17e) --->
                    Ljava/net/HttpURLConnection;->setRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x184) ---> Ljava/net/HttpURLConnection;->connect()V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x18a) --->
                    Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x19e) ---> Ljava/net/HttpURLConnection;->getContentLength()I
               => Lcom/google/android/gms/internal/cy;->aB()V (0x5a) ---> Ljava/net/HttpURLConnection;->getResponseCode()I
               => Lcom/google/android/gms/internal/cy;->aB()V (0xb6) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/cy;->aB()V (0xc0) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/dg;->d(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse; (0x1e) ---> Ljava/net/HttpURLConnection;->connect()V
               => Lcom/google/android/gms/internal/dg;->d(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse; (0x28) --->
                    Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/google/android/gms/internal/dg;->d(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse; (0x66) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/dg;->d(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Landroid/webkit/WebResourceResponse; (0x70) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/tagmanager/aw;->a(Ljava/net/HttpURLConnection;)Ljava/io/InputStream; (0x0) --->
                    Ljava/net/HttpURLConnection;->getResponseCode()I
               => Lcom/google/android/gms/tagmanager/aw;->a(Ljava/net/HttpURLConnection;)Ljava/io/InputStream; (0x10) --->
                    Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/google/android/gms/tagmanager/aw;->b(Ljava/net/HttpURLConnection;)V (0x4) --->
                    Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/tagmanager/aw;->bp(Ljava/lang/String;)Ljava/net/HttpURLConnection; (0x1a) --->
                    Ljava/net/HttpURLConnection;->setReadTimeout(I)V
               => Lcom/google/android/gms/tagmanager/aw;->bp(Ljava/lang/String;)Ljava/net/HttpURLConnection; (0x20) --->
                    Ljava/net/HttpURLConnection;->setConnectTimeout(I)V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x3a) ---> Ljava/net/HttpURLConnection;->getResponseCode()I
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x42) --->
                    Ljava/net/HttpURLConnection;->getHeaderFields()Ljava/util/Map;
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x62) --->
                    Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x8c) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0xb6) --->
                    Ljava/net/HttpURLConnection;->getHeaderField(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0xe0) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x114) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x156) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x166) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/google/android/gms/internal/ci;->a(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String;)Lcom/google/android/gms/internal/cf; (0x1b8) ---> Ljava/net/HttpURLConnection;->disconnect()V
[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libbspatch.so]
               => Lcom/umeng/common/util/DeltaUpdate;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" you're not using it.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking:
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 4.579133 secs
Total elapsed time: 16.104944 secs
