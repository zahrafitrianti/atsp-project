*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.BioTechnology.iClientsService44370
Package Version Name: 1.2
Package Version Code: 2
Min Sdk: 10
Target Sdk: 10
MD5   : 021d55c415ff951c8e7b1ce3f94399bb
SHA1  : e95088075f49488e8b4014493b974b2fbb9cc71d
SHA256: f448c6d8e2e970020c1993be69120a6a8761df7be978f989d41da8c531c33063
SHA512: 4550d4a029afaa375f780e9b0afa8e8985454b448eb767056be2f296586ead6d26735a744e48bb3d45302d7be03cac46f673f87a11dd3df7424c322ead4d4db7
Analyze Signature: a2f3a909e27ad58fdcb41e980dacab26a6d95724a70a5570490977f32dd9e945323140ba7626a9a4c3205b6d9b5f89fadfa8aeb856296c9d179da5ca53c0008b
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:4):
               http://bxateca.net/iBanking/crashlog/
                   => Leg;->run()V
               http://twitter.com/share?url=https://www.cgd.pt/Corporativo/Grupo-CGD/Pages/Contactos-CGD-Sede.aspx
                   => Lcom/soft360/iService/MainActivity;->template9_click(Landroid/view/View;)V
               http://www.facebook.com/sharer.php?u=https://www.cgd.pt/Corporativo/Grupo-CGD/Pages/Contactos-CGD-Sede.aspx
                   => Lcom/soft360/iService/MainActivity;->template9_click(Landroid/view/View;)V
               http://www.linkedin.com/shareArticle?mini=true&url=https://www.cgd.pt/Corporativo/Grupo-CGD/Pages/Contactos-CGD-Sede.aspx
                   => Lcom/soft360/iService/MainActivity;->template9_click(Landroid/view/View;)V
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Led;-><init>(LdU; Ljava/lang/String; Ljava/lang/String;)V (0x4a) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lee;-><init>(LdU;)V (0x4e) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Len;->a(Ljava/lang/String;)Ljava/lang/String; (0x62) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Leq;->a(Ljava/lang/String;)Ljava/lang/String; (0x6e) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Leu;->c()Ljava/lang/String; (0x4) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/soft360/iService/MainActivity;->onCreate(Landroid/os/Bundle;)V (0x5c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/soft360/iService/MainActivity;->onCreate(Landroid/os/Bundle;)V (0x50e) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => LdU;->a()Ljava/lang/String; (0x14) ---> Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Len;-><init>()V (0x50) ---> Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Leu;->a()Ljava/lang/String; (0x14) ---> Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning]  Codes for Sending SMS:
           This app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage):
               => Lcom/soft360/iService/SmsReciever;->onReceive(Landroid/content/Context; Landroid/content/Intent;)V (0x590) --->
                    Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => Lcom/soft360/iService/SmsReciever;->onReceive(Landroid/content/Context; Landroid/content/Intent;)V (0x7a6) --->
                    Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => LdU;->a()V (0x34) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => LdU;->a(Ljava/lang/String;)V (0x3a) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => LdU;->c(Ljava/lang/String;)V (0x68) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => LdU;->e()Z (0x60) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => Leu;->a(LdU; Z)V (0x3aa) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => Leu;->a()V (0xa0) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
               => Leu;->a()V (0x15c) ---> Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V
[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
           Security case related to ADB Backup:
           1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
           2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
           3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
           Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
           Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
           But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use encrypt your
           databases and Journals by "SQLCipher" or other libs).
           Proof-Of-Concept Reference:
           (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
           (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Led;-><init>(LdU; Ljava/lang/String; Ljava/lang/String;)V (0x166) ---> Ljava/io/File;->delete()Z
               => Len;->b(Len;)V (0xe) ---> Ljava/io/File;->delete()Z
               => Leq;->b(Leq;)V (0xe) ---> Ljava/io/File;->delete()Z
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 receiver => com.soft360.Receiver.MyPhoneReceiver
                 receiver => com.soft360.iService.SmsReciever
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" you're not using it.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 0.77894 secs
Total elapsed time: 1.999967 secs
