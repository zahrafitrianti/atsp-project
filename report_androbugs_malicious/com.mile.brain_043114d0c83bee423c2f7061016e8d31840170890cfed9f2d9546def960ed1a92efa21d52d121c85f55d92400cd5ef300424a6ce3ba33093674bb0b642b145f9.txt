*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.mile.brain
Package Version Name: 9.10.12.21
Package Version Code: 21
Min Sdk: 8
MD5   : 1416445ca38d3f168e98e1c2e25ac469
SHA1  : 10ef0cedca56d0017e441ffd4022891e42b81b80
SHA256: ad61e0abe570c3575b01fbd07fc92e88c2516d1b74bb2ed536c6e2cc8e70435e
SHA512: 0055b0013ab064af78d6a8f4a4c8903277d4062d2ede1f46b48e034db6cd913f7170c8813a4e1aa3b7cc82ce540e02010e49b418a5a1940941f4ca7fd26a01f5
Analyze Signature: 043114d0c83bee423c2f7061016e8d31840170890cfed9f2d9546def960ed1a92efa21d52d121c85f55d92400cd5ef300424a6ce3ba33093674bb0b642b145f9
------------------------------------------------------------------------------------------------
[Critical] <Command> Runtime Command Checking:
           This app is using critical function 'Runtime.getRuntime().exec("...")'.
           Please confirm these following code secions are not harmful:
               => Lcom/tencent/StubShell/TxAppEntry;->LoadResSo(Landroid/content/Context;)V (0x34) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Lcom/tencent/StubShell/TxAppEntry;->LoadResSo(Landroid/content/Context;)V (0x14c) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
           Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.service.mainService
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:14):
               http://alog.umeng.co/app_logs
                   => Lcom/umeng/analytics/g;-><clinit>()V
               http://alog.umeng.com/app_logs
                   => Lcom/umeng/analytics/g;-><clinit>()V
               http://au.umeng.co/api/check_app_update
                   => Lcom/umeng/update/h;-><init>(Landroid/content/Context;)V
               http://au.umeng.com/api/check_app_update
                   => Lcom/umeng/update/h;-><init>(Landroid/content/Context;)V
               http://feedback.umeng.com/feedback/feedbacks
                   => Lcom/umeng/fb/a/b;->a(Lcom/umeng/fb/model/UserTitleReply;)Z
               http://feedback.umeng.com/feedback/reply
                   => Lcom/umeng/fb/a/b;->a(Ljava/util/List; Ljava/lang/String; Ljava/lang/String;)Ljava/util/List;
                   => Lcom/umeng/fb/a/b;->a(Lcom/umeng/fb/model/UserReply;)Z
               http://goo.gl/KfgbJX
                   => Lcom/zhtt/main/main$2;->run()V
               http://goo.gl/bXSiLb
                   => Lcom/zhtt/main/Test;->showGpInstall(Landroid/content/Context;)V
               http://goo.gl/kkmFyL
                   => Lcom/zhtt/main/Test;->_endGpInstall(Z Lcom/nn/googlePlayInstall$RESULT; I Ljava/lang/String;)V
               http://goo.gl/rxewl0
                   => Lcom/zhtt/main/TestReceiver;->onReceive(Landroid/content/Context; Landroid/content/Intent;)V
               http://log.yizhandaodi.cn/popstar/index.php
                   => Lcom/zhtt/main/util/Report;-><init>(Landroid/content/Context;)V
               http://oc.umeng.co/check_config_update
                   => Lcom/umeng/analytics/g;-><clinit>()V
               http://oc.umeng.com/check_config_update
                   => Lcom/umeng/analytics/g;-><clinit>()V
               http://plugin.mtscj.com/cfg/
                   => Lcom/service/PluginManager;->_updatePlugin(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;)V
[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
           References:
           (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
           (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (3)https://jira.appcelerator.org/browse/TIMOB-4488
           Vulnerable codes:
               Lcom/zhtt/main/dialog/WebViewDialog$MyWebViewClient;->onReceivedSslError(Landroid/webkit/WebView;
                    Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V
[Critical]  AndroidManifest Critical Use Permission Checking:
           This app has very high privileges. Use it carefully.
               Critical use-permission found: "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
               Critical use-permission found: "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
[Warning]  Dynamic Code Loading:
           Dynamic code loading(DexClassLoader) found:
               => Lcom/block/event/DD;->a(Ljava/io/File; Ljava/lang/String; Ljava/lang/String; Ljava/io/File;)Ljava/lang/Class; (0x44) --->
                    Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/ClassLoader;)V
               => Lcom/block/event/DD;->a(Ljava/io/File; Ljava/lang/String; Ljava/lang/String; Ljava/io/File;)Ljava/lang/Class; (0x78) --->
                    Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/service/PluginManager;->_loadPlugin(Landroid/content/Context; Ljava/io/File; Landroid/os/Handler;)Ljava/lang/String;
                    (0xbc) ---> Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/ClassLoader;)V
               => Lcom/service/PluginManager;->_loadPlugin(Landroid/content/Context; Ljava/io/File; Landroid/os/Handler;)Ljava/lang/String;
                    (0xfe) ---> Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;
               => Lcom/tencent/StubShell/TxAppEntry;->ReleaseAndLoadDexFile(Landroid/content/Context;)V (0xf0) --->
                    Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/ClassLoader;)V
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/umeng/common/net/q;->a(Ljava/lang/String; Landroid/content/Context; [Z)Ljava/io/File; (0x24) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/umeng/common/net/q;->a(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String; (0x5c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/umeng/common/net/q;->b(Landroid/content/Context; Ljava/lang/String;)Ljava/io/File; (0x24) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                  service => com.service.mainService
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/block/event/d;->h(Landroid/content/Context;)Z (0x24) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/block/event/g;->k(Landroid/content/Context;)Ljava/lang/String; (0x48) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/tools/UserTool;->getUDID()Ljava/lang/String; (0x66) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/umeng/common/b;->g(Landroid/content/Context;)Ljava/lang/String; (0x46) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/zhtt/main/main;->getDeviceId()Ljava/lang/String; (0x24) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/zhtt/main/main;->getUDID()Ljava/lang/String; (0x92) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/block/event/DD;->d(Landroid/content/Context; Ljava/lang/String;)Ljava/lang/String; (0xe0) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/block/event/g;->k(Landroid/content/Context;)Ljava/lang/String; (0x78) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/tools/UserTool;->getUDID()Ljava/lang/String; (0x4a) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/umeng/common/b;->g(Landroid/content/Context;)Ljava/lang/String; (0x96) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/zhtt/main/main;->getDeviceId()Ljava/lang/String; (0x78) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/zhtt/main/main;->getUDID()Ljava/lang/String; (0x76) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;
                    Landroid/webkit/WebChromeClient;)V
               Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;)V
               Lcom/zhtt/main/dialog/WebViewDialog;->initWebView()V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;)V (0x24) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/umeng/analytics/MobclickAgentJSInterface;-><init>(Landroid/content/Context; Landroid/webkit/WebView;
                    Landroid/webkit/WebChromeClient;)V (0x24) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/zhtt/main/dialog/WebViewDialog;->initWebView()V (0x5a) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
           Security case related to ADB Backup:
           1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
           2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
           3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
           Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup
[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               Lcom/tools/SystemTool;->isRootSystem()Z  => 'su'
               Lcom/tools/SystemTool;->isRootSystem()Z  => '/system/bin/'
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
           Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
           But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use encrypt your
           databases and Journals by "SQLCipher" or other libs).
           Proof-Of-Concept Reference:
           (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
           (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/block/event/DD;->a(Ljava/io/File;)V (0x28) ---> Ljava/io/File;->delete()Z
               => Lcom/block/event/DD;->a(Ljava/io/File;)V (0x38) ---> Ljava/io/File;->delete()Z
               => Lcom/service/PluginManager;->_updatePlugin(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;)V (0x1c8) --->
                    Ljava/io/File;->delete()Z
               => Lcom/tencent/StubShell/TxAppEntry;->splitPayLoadFromDex([B)V (0x40) ---> Ljava/io/File;->delete()Z
               => Lcom/tools/FileTool;->delFile(Ljava/io/File;)V (0x3a) ---> Ljava/io/File;->delete()Z
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0x54) ---> Ljava/io/File;->delete()Z
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0x1de) ---> Ljava/io/File;->delete()Z
               => Lcom/umeng/analytics/j;->a(Landroid/content/Context; Ljava/lang/String;)Lorg/json/JSONObject; (0x38) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/d$c;->a([Ljava/lang/String;)Ljava/lang/Integer; (0x3c) ---> Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/q$c;->a([Ljava/lang/Object;)Landroid/graphics/drawable/Drawable; (0x58) --->
                    Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/q;->a(Landroid/content/Context; Landroid/widget/ImageView; Ljava/lang/String; Z
                    Lcom/umeng/common/net/q$a; Landroid/view/animation/Animation; Z)V (0x62) ---> Ljava/io/File;->delete()Z
               => Lcom/umeng/common/net/q;->b(Ljava/io/File; J)V (0x7e) ---> Ljava/io/File;->delete()Z
               => Lcom/zhtt/main/util/FileUtil;->deleteFile(Ljava/io/File;)V (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/zhtt/main/util/FileUtil;->deleteFile(Ljava/io/File;)V (0x52) ---> Ljava/io/File;->delete()Z
[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Found codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml:
               => Lcom/umeng/common/b;->x (Landroid/content/Context;)Z
               => Lcom/zhtt/main/main;->isDebug ()Z
[Notice]  HttpURLConnection Android Bug Checking:
           You're using "HttpURLConnection". Prior to Android 2.2 (Froyo), "HttpURLConnection" had some frustrating bugs.
           In particular, calling close() on a readable InputStream could poison the connection pool. Work around this by disabling
           connection pooling.
           Please check the reference:
            (1)http://developer.android.com/reference/java/net/HttpURLConnection.html
            (2)http://android-developers.blogspot.tw/2011/09/androids-http-clients.html
               => Lcom/block/event/e;->run()V (0x3c) ---> Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/block/event/e;->run()V (0x5a) ---> Ljava/net/HttpURLConnection;->disconnect()V
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0x94) ---> Ljava/net/HttpURLConnection;->setConnectTimeout(I)V
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0x9e) ---> Ljava/net/HttpURLConnection;->setReadTimeout(I)V
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0xa8) ---> Ljava/net/HttpURLConnection;->setRequestMethod(Ljava/lang/String;)V
               => Lcom/tools/NetworkTool;->simpleDownload(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    I)Lcom/util/tt$Result; (0xae) ---> Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x20) --->
                    Ljava/net/HttpURLConnection;->setRequestMethod(Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x2e) --->
                    Ljava/net/HttpURLConnection;->setRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x3c) --->
                    Ljava/net/HttpURLConnection;->addRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x46) --->
                    Ljava/net/HttpURLConnection;->setConnectTimeout(I)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x50) --->
                    Ljava/net/HttpURLConnection;->setReadTimeout(I)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Ljava/net/URL; Ljava/io/File;)Ljava/net/HttpURLConnection; (0x114) --->
                    Ljava/net/HttpURLConnection;->setRequestProperty(Ljava/lang/String; Ljava/lang/String;)V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0xe0) ---> Ljava/net/HttpURLConnection;->connect()V
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0xe6) --->
                    Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x130) ---> Ljava/net/HttpURLConnection;->getContentLength()I
               => Lcom/umeng/common/net/DownloadingService$b;->a(Z)V (0x186) ---> Ljava/net/HttpURLConnection;->getContentLength()I
[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libbspatch.so]
               => Lcom/umeng/common/util/DeltaUpdate;-><clinit>()V (0x14) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libcocos2djs.so]
               => Lcom/zhtt/main/main;-><clinit>()V (0x18) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.zhtt.main.main
                 activity => com.snake.popularize.ui.AppStart
                 receiver => com.service.StaticReceiver
                 receiver => com.block.event.DD
                 receiver => com.zhtt.main.TestReceiver
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" you're not using it.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 0.907338 secs
Total elapsed time: 2.274528 secs
